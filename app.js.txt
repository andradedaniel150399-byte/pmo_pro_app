// --- MAIN APPLICATION LOGIC ---

document.addEventListener('DOMContentLoaded', () => {
    
    // --- STATE & GLOBAL VARIABLES ---
    const state = {
        currentUser: null,
        currentView: 'dashboard',
        data: {
            projects: [], 
            professionals: [], 
            allocations: [], 
            comments: []
        },
        subscriptions: []
    };

    const ui = {
        navItems: document.querySelectorAll('.nav-item'),
        views: document.querySelectorAll('.view-content'),
        viewTitle: document.getElementById('view-title'),
        loadingOverlay: document.getElementById('loading-overlay'),
        userEmail: document.getElementById('user-email'),
        logoutBtn: document.getElementById('logout-btn'),
    };
    
    const titles = { 
        dashboard: 'Dashboard', 
        kanban: 'Kanban de Projetos', 
        planner: 'Planejador Visual', 
        portfolio: 'Portfólio de Projetos', 
        profitability: 'Análise de Rentabilidade', 
        forecast: 'Forecast de Receita', 
        capacity: 'Análise de Capacidade', 
        management: 'Gestão de Alocações', 
        settings: 'Configurações' 
    };

    // --- AUTHENTICATION CHECK ---
    async function checkSession() {
        const { data: { session }, error } = await supabase.auth.getSession();
        if (error || !session) {
            window.location.href = 'index.html';
            return;
        }
        state.currentUser = session.user;
        initializeApp();
    }

    // --- INITIALIZATION ---
    function initializeApp() {
        ui.loadingOverlay.style.display = 'flex';
        ui.userEmail.textContent = state.currentUser.email;
        setupEventListeners();
        switchView('dashboard');
        fetchAllData();
    }

    // --- DATA FETCHING & REALTIME ---
    async function fetchAllData() {
        await Promise.all([
            fetchData('professionals'),
            fetchData('projects'),
            fetchData('allocations'),
            fetchData('comments')
        ]);
        renderAllViews();
        setupRealtimeSubscriptions();
        ui.loadingOverlay.style.display = 'none';
    }

    async function fetchData(tableName) {
        const { data, error } = await supabase
            .from(tableName)
            .select('*')
            .eq('user_id', state.currentUser.id);

        if (error) {
            console.error(`Error fetching ${tableName}:`, error);
        } else {
            state.data[tableName] = data;
        }
    }
    
    function setupRealtimeSubscriptions() {
        state.subscriptions.forEach(sub => sub.unsubscribe());
        state.subscriptions = [];

        const createSubscription = (table) => {
            const sub = supabase.channel(`public:${table}`)
                .on('postgres_changes', { event: '*', schema: 'public', table: table }, (payload) => {
                    // Simple approach: refetch all data on any change
                    fetchAllData();
                })
                .subscribe();
            state.subscriptions.push(sub);
        };
        
        createSubscription('professionals');
        createSubscription('projects');
        createSubscription('allocations');
        createSubscription('comments');
    }

    // --- UI & VIEW MANAGEMENT ---
    function switchView(viewId) {
        state.currentView = viewId;
        ui.viewTitle.textContent = titles[viewId];
        ui.navItems.forEach(item => {
            item.classList.toggle('bg-slate-700', item.id === `nav-${viewId}`);
        });
        ui.views.forEach(view => {
            view.classList.toggle('hidden', view.id !== `view-${viewId}`);
        });
        renderAllViews();
    }

    function renderAllViews() {
        // This function can be expanded to render specific views as needed
        renderProfessionalsList();
        // Add other render calls here, e.g., renderKanbanBoard();
    }
    
    // --- SPECIFIC RENDER FUNCTIONS ---
    function renderProfessionalsList() {
        const container = document.getElementById('professionals-list-container');
        if (!container) return;
        
        let tableHTML = `<table class="w-full text-sm text-left"><thead class="text-xs uppercase bg-slate-50 dark:bg-slate-700"><tr><th class="px-6 py-3">Nome</th><th class="px-6 py-3">Cargo</th><th class="px-6 py-3">Custo/Hora</th><th></th></tr></thead><tbody>`;
        
        if (state.data.professionals.length === 0) {
            tableHTML += `<tr><td colspan="4" class="text-center py-10 text-slate-500">Nenhum profissional adicionado.</td></tr>`;
        } else {
            state.data.professionals.forEach(p => {
                tableHTML += `<tr class="bg-white dark:bg-slate-800 border-b dark:border-slate-700">
                    <td class="px-6 py-4 font-medium">${p.name}</td>
                    <td class="px-6 py-4">${p.role}</td>
                    <td class="px-6 py-4">R$ ${p.cost}</td>
                    <td class="px-6 py-4 text-right">
                        <button data-id="${p.id}" class="remove-prof-btn font-medium text-red-600 hover:underline">Remover</button>
                    </td>
                </tr>`;
            });
        }
        
        tableHTML += `</tbody></table>`;
        container.innerHTML = tableHTML;
    }


    // --- EVENT LISTENERS & HANDLERS ---
    function setupEventListeners() {
        ui.navItems.forEach(item => {
            item.addEventListener('click', (e) => {
                e.preventDefault();
                switchView(item.id.replace('nav-', ''));
            });
        });

        ui.logoutBtn.addEventListener('click', async () => {
            await supabase.auth.signOut();
            window.location.href = 'index.html';
        });

        const addProfessionalForm = document.getElementById('add-professional-form');
        if (addProfessionalForm) {
            addProfessionalForm.addEventListener('submit', handleAddProfessional);
        }
        
        const professionalsContainer = document.getElementById('professionals-list-container');
        if(professionalsContainer) {
            professionalsContainer.addEventListener('click', handleRemoveProfessional);
        }
    }
    
    async function handleAddProfessional(e) {
        e.preventDefault();
        const name = e.target.elements['prof-name'].value;
        const role = e.target.elements['prof-role'].value;
        const cost = parseFloat(e.target.elements['prof-cost'].value);

        if (!name || !role || isNaN(cost)) {
            alert('Por favor, preencha todos os campos.');
            return;
        }

        const { error } = await supabase.from('professionals').insert({
            name,
            role,
            cost,
            user_id: state.currentUser.id
        });

        if (error) {
            console.error('Error adding professional:', error);
            alert('Não foi possível adicionar o profissional.');
        } else {
            e.target.reset();
        }
    }
    
    async function handleRemoveProfessional(e) {
        if (!e.target.classList.contains('remove-prof-btn')) return;
        
        const professionalId = e.target.dataset.id;
        if (confirm('Tem a certeza que quer remover este profissional?')) {
            const { error } = await supabase.from('professionals').delete().eq('id', professionalId);
            if(error) {
                console.error('Error removing professional:', error);
                alert('Não foi possível remover o profissional.');
            }
        }
    }

    // --- START THE APP ---
    checkSession();
});

